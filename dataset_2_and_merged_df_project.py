# -*- coding: utf-8 -*-
"""Dataset 2 and Merged Df Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DMrNBQiyZheU2Vht219Nivzb92BqXy6F
"""

#!pip install country_converter --upgrade
import country_converter as coco

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
import statistics
from scipy import stats
import seaborn as sns
from statistics import mean, mode, median, stdev

round(0.2225, 0)

#Read the imported data
df= pd.read_csv('unemployment-rate.csv')
df

df.info()

print (df)

# drop rows with missing value
df = df[df.notnull().all(axis=1)]
df.reset_index(drop=True, inplace=True)
df

cc= coco.CountryConverter()
df ['Continent'] =cc.convert(names= df['Entity'],to = 'continent')

df.info()

df.rename(columns={'Entity': 'Country'}, inplace=True)
df.rename(columns={'Unemployment, total (% of total labor force) (modeled ILO estimate)':'Unemployment rate'}, inplace=True)

df.columns

df[df.Country=='Kenya']

df[df.Continent=='Africa']

df[df.Continent=='not found']

nf = df[df.Continent=='not found']
print(nf)

df.drop(index= nf.index, inplace = True)

df.columns

df.drop(df[df['Year'] < 2010].index, inplace=True)
df

df.rename(columns={'Year': 'year'}, inplace=True)
df.rename(columns={'Code': 'Country Code'}, inplace=True)
df

df.info()

#Importing a 2nd csv file
df1 = pd.read_csv('GDP-per-capita1.csv')

df1.info()

#merge df and df1 based on Coutry
merged_df = pd.merge(df, df1, on=['Country', 'year', 'Country Code'], how='inner')

merged_df

merged_df.info()

#Exporting the data in csv file
merged_df.to_csv('Unemployment-&-GDP-per-capita1.csv', index = False)

# Find the unique values in  'Country'
unique_values = merged_df['Country'].unique()

# Convert the unique values to a Python list using tolist() and count the number of unique values
unique_values_list = unique_values.tolist()
num_unique_values = len(unique_values)

# Print the result
print('Unique values:', unique_values_list)
print(num_unique_values)

# Find the unique values in  'Continent'
unique_values = merged_df['Continent'].unique()

# Convert the unique values to a Python list using tolist() and count the number of unique values
unique_values_list1 = unique_values.tolist()
num_unique_values1 = len(unique_values)

# Print the result
print('Unique values:', unique_values_list1)
print(num_unique_values1)

merged_df.describe()

#Defining variables
var1 = merged_df['Country']
var2 = merged_df['Country Code']
var3 = merged_df['Continent']
var4 = merged_df['year']
var5 = merged_df['Unemployment rate']
var6 = merged_df['GDP_value']

#Creating a function to calculate the mean, mode, meadian and standard deviation

def sense_of_data(unemployment):
  world = []
  world.append(mean(unemployment))
  world.append(mode(unemployment))
  world.append(median(unemployment))
  world.append(stdev(unemployment))
  print(world)

sense_of_data(var4)
sense_of_data(var5)
sense_of_data(var6)

merged_df.groupby(['Continent']).count()

sns.countplot(data=merged_df,x=merged_df.Continent)
plt.show()

c=[]
for country in merged_df.Country.unique():
    x=merged_df[merged_df.Country == country].index[0]
    c.append(merged_df.iloc[x].Continent)

merged_df[merged_df.Country == 'Kenya'].index[0]

merged_df.iloc[0].Continent

print(c)

len(merged_df.Country.unique())

len(c)

sns.countplot(x=c)
plt.show()

#plot a histogram to make sense of the columns
merged_df.hist(bins=40, figsize=(15,10))
plt.show()

merged_df.columns

1. #What are the trends in the unemployment rate vs. GDP per capita over the years?
#Line Plots
# create a scatter plot for unemployment rate vs GDP per capita

x= merged_df['GDP_value']
y= merged_df['Unemployment rate']
plt.scatter(merged_df['Unemployment rate'], merged_df['GDP_value'])

# perform linear regression among the two variables
#re = stats.linregress(x, y)

# set plot title and axis labels
plt.title('Unemployment Rate vs GDP per Capita')
plt.xlabel('Unemployment rate')
plt.ylabel('GDP per capita')

# plot the regression line
#plt.plot(x, re.intercept + re.slope*x, 'r', label='best fit')

# show the plot
#plt.plot(x,re.intercept + re.slope*x,'r',label='best fit')
plt.show()

merged_df.describe()
merged_df.corr()

# create a scatter plot for unemployment rate vs GDP per capita in Africa
africa_df = merged_df[merged_df['Continent'] == 'Africa']  # subset data for African countries
x = africa_df['Unemployment rate']
y = africa_df['GDP_value']
plt.scatter(x, y)

# perform linear regression among the two variables
re = stats.linregress(x, y)

# set plot title and axis labels
plt.title('Unemployment Rate vs GDP per Capita in Africa')
plt.xlabel('Unemployment rate')
plt.ylabel('GDP per capita')

# plot the regression line
plt.plot(x, re.intercept + re.slope*x, 'r', label='best fit')

# show the plot
plt.legend()
plt.show()

# subset the merged dataset to include only African countries
africa_df = merged_df[merged_df['Continent'] == 'Africa']

# calculate the correlation coefficient between unemployment rate and GDP per capita
correlation_coeff = africa_df['Unemployment rate'].corr(africa_df['GDP_value'])

# print the correlation coefficient
print('Correlation coefficient between unemployment rate and GDP per capita in Africa:', correlation_coeff)

# calculate the correlation coefficient and p-value between unemployment rate and GDP per capita
corr_coef, p_value = stats.pearsonr(africa_df['Unemployment rate'], africa_df['GDP_value'])

# print the p-value
print('P-value for the correlation between unemployment rate and GDP per capita in Africa:', p_value)

# create a scatter plot for unemployment rate vs GDP per capita in Europe
europe_df = merged_df[merged_df['Continent'] == 'Europe']  # subset data for African countries
x = europe_df['Unemployment rate']
y = europe_df['GDP_value']
plt.scatter(x, y)

# perform linear regression among the two variables
re = stats.linregress(x, y)

# set plot title and axis labels
plt.title('Unemployment Rate vs GDP per Capita in Europe')
plt.xlabel('Unemployment rate')
plt.ylabel('GDP per capita')

# plot the regression line
plt.plot(x, re.intercept + re.slope*x, 'r', label='best fit')

# show the plot
plt.legend()
plt.show()

# subset the merged dataset to include only European countries
europe_df = merged_df[merged_df['Continent'] == 'Europe']

# calculate the correlation coefficient between unemployment rate and GDP per capita
correlation_coeff = europe_df['Unemployment rate'].corr(europe_df['GDP_value'])

# print the correlation coefficient
print('Correlation coefficient between unemployment rate and GDP per capita in europe:', correlation_coeff)

# calculate the correlation coefficient and p-value between unemployment rate and GDP per capita
corr_coef, p_value = stats.pearsonr(africa_df['Unemployment rate'], europe_df['GDP_value'])

# print the p-value
print('P-value for the correlation between unemployment rate and GDP per capita in Europe:', p_value)

# create a scatter plot for unemployment rate vs GDP per capita in Europe
america_df = merged_df[merged_df['Continent'] == 'America']
x = europe_df['Unemployment rate']
y = europe_df['GDP_value']
plt.scatter(x, y)

# perform linear regression among the two variables
re = stats.linregress(x, y)

# set plot title and axis labels
plt.title('Unemployment Rate vs GDP per Capita in America')
plt.xlabel('Unemployment rate')
plt.ylabel('GDP per capita')

# plot the regression line
plt.plot(x, re.intercept + re.slope*x, 'r', label='best fit')

# show the plot
plt.legend()
plt.show()

# create a scatter plot for unemployment rate vs GDP per capita in Europe
africa_df = merged_df[merged_df['Continent'] == 'Europe']  # subset data for African countries
x = africa_df['Unemployment rate']
y = africa_df['GDP_value']
plt.scatter(x, y)

# perform linear regression among the two variables
re = stats.linregress(x, y)

# set plot title and axis labels
plt.title('Unemployment Rate vs GDP per Capita in Europe')
plt.xlabel('Unemployment rate')
plt.ylabel('GDP per capita')

# plot the regression line
plt.plot(x, re.intercept + re.slope*x, 'r', label='best fit')

# show the plot
plt.legend()
plt.show()

merged_df.describe()

merged_df.columns

#p-value for Unemployment rate and GDP
p_value = stats.ttest_ind(merged_df['Unemployment rate'], merged_df['GDP_value'])[1]

# Print the results
print("p-value:",p_value)

# filter data for African countries
african_data = merged_df.loc[merged_df['Continent'] == 'Africa']

# create a line plot for unemployment rate vs GDP per capita
#plt.plot(african_data['year'], african_data['GDP_value'])

for country in african_data.Country:
    x=african_data[african_data.Country == country]
    plt.plot(x['year'], x['GDP_value'])
    #plt.text(country)

# set plot title and axis labels
plt.title('year vs GDP per Capita')
plt.xlabel('Year')
plt.ylabel('GDP per capita')

# show the plot
plt.legend()
plt.show()

# filter data for African countries
african_data = merged_df.loc[merged_df['Country'] == 'Kenya']

# create a line plot for unemployment rate vs GDP per capita
plt.plot(african_data['year'], african_data['GDP_value'])

# set y-axis to log scale for a smoother curve
#plt.yscale('log')

# set plot title and axis labels
plt.title("Kenya's GDP per Capita over the years")
plt.xlabel('Year')
plt.ylabel('GDP per Capita')

# show the plot
plt.legend()
plt.show()

# filter data for Kenya
kenya_data = merged_df.loc[merged_df['Country'] == 'Kenya']
US_data = merged_df.loc[merged_df['Country'] == 'United States']


# create a line plot for unemployment rate vs GDP per capita
plt.plot(kenya_data['Unemployment rate'], kenya_data['GDP_value'])
plt.plot(US_data['Unemployment rate'], US_data['GDP_value'])

# set plot title and axis labels
plt.title('Unemployment Rate vs GDP per Capita in Kenya vs USA')
plt.xlabel('Unemployment Rate')
plt.ylabel('GDP per capita')

# show the plot
plt.legend()
plt.show()

2.1
# calculate average unemployment rate for each year in the WORLD
unemp_avg = merged_df.groupby('year')['Unemployment rate'].mean()

# calculate average GDP per capita for each year
gdp_avg = merged_df.groupby('year')['GDP_value'].mean()

# create a figure and axis object
fig, ax1 = plt.subplots()

# plot the average unemployment rate on the left y-axis
ax1.plot(unemp_avg.index, unemp_avg.values, color='red')
ax1.set_xlabel('Year')
ax1.set_ylabel('Average Unemployment Rate', color='red')
ax1.tick_params(axis='y', labelcolor='red')

# set y-axis to log scale for a smoother curve
#ax1.set_yscale('log')

# create a second axis object for the average GDP per capita on the right y-axis
ax2 = ax1.twinx()

# plot the average GDP per capita on the right y-axis
ax2.plot(gdp_avg.index, gdp_avg.values, color='blue')
ax2.set_ylabel('Average GDP per Capita', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

# set y-axis to log scale for a smoother curve
#ax2.set_yscale('log')

# set the title of the plot
plt.title('Average Unemployment Rate and GDP per Capita in the World')

# display the plot
plt.show()

2.2
# filter data for the African continent
african_data = merged_df.loc[(merged_df['Continent'] =='Africa')]

# calculate average unemployment rate for each year in Africa
unemp_avg = african_data.groupby('year')['Unemployment rate'].mean()

# calculate average GDP per capita for each year in Africa
gdp_avg = african_data.groupby('year')['GDP_value'].mean()

# create a figure and axis object
fig, ax1 = plt.subplots()

# plot the average unemployment rate on the left y-axis
ax1.plot(unemp_avg.index, unemp_avg.values, color='red')
ax1.set_xlabel('Year')
ax1.set_ylabel('Average Unemployment Rate', color='red')
ax1.tick_params(axis='y', labelcolor='red')

# create a second axis object for the average GDP per capita on the right y-axis
ax2 = ax1.twinx()

# plot the average GDP per capita on the right y-axis
ax2.plot(gdp_avg.index, gdp_avg.values, color='blue')
ax2.set_ylabel('Average GDP per Capita', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

# set the title of the plot
plt.title('Average Unemployment Rate and GDP per Capita in Africa')

# display the plot
plt.show()

2.2
# filter data for the American continent
american_data = merged_df.loc[(merged_df['Continent'] =='America')]

# calculate average unemployment rate for each year in Africa
unemp_avg = american_data.groupby('year')['Unemployment rate'].mean()

# calculate average GDP per capita for each year in Africa
gdp_avg = american_data.groupby('year')['GDP_value'].mean()

# create a figure and axis object
fig, ax1 = plt.subplots()

# plot the average unemployment rate on the left y-axis
ax1.plot(unemp_avg.index, unemp_avg.values, color='red')
ax1.set_xlabel('Year')
ax1.set_ylabel('Average Unemployment Rate', color='red')
ax1.tick_params(axis='y', labelcolor='red')

# create a second axis object for the average GDP per capita on the right y-axis
ax2 = ax1.twinx()

# plot the average GDP per capita on the right y-axis
ax2.plot(gdp_avg.index, gdp_avg.values, color='blue')
ax2.set_ylabel('Average GDP per Capita', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

# set the title of the plot
plt.title('Average Unemployment Rate and GDP per Capita in America')

# display the plot
plt.show()

2.3
# filter data for Kenya from 2010 to 2021
kenya_data = merged_df.loc[(merged_df['Country'] == 'Kenya')]

# create figure and axes objects
fig, ax1 = plt.subplots()

# create second y-axis object
ax2 = ax1.twinx()

# plot unemployment rate on first axis
ax1.plot(kenya_data['year'], kenya_data['Unemployment rate'], color='red')
ax1.set_xlabel('Year')
ax1.set_ylabel('Unemployment Rate', color='red')
ax1.tick_params(axis='y', labelcolor='red')

# plot GDP on second axis
ax2.plot(kenya_data['year'], kenya_data['GDP_value'], color='blue')
ax2.set_ylabel('GDP', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

# set title
plt.title('Kenya: Unemployment Rate and GDP')

# show plot
plt.show()

# filter data for Ghana from 2010 to 2021
ghana_data = merged_df.loc[(merged_df['Country'] == 'Ghana')]

# create figure and axes objects
fig, ax1 = plt.subplots()

# create second y-axis object
ax2 = ax1.twinx()

# plot unemployment rate on first axis
ax1.plot(ghana_data['year'], ghana_data['Unemployment rate'], color='red')
ax1.set_xlabel('Year')
ax1.set_ylabel('Unemployment Rate', color='red')
ax1.tick_params(axis='y', labelcolor='red')

# plot GDP on second axis
ax2.plot(ghana_data['year'], ghana_data['GDP_value'], color='blue')
ax2.set_ylabel('GDP', color='blue')
ax2.tick_params(axis='y', labelcolor='blue')

# set title
plt.title('Ghana: Unemployment Rate and GDP')

# show plot
plt.show()

# filter data for Ghana from 2010 to 2021
USA_data = merged_df.loc[(merged_df['Country'] == 'Greece')]

# create figure and axes objects
fig, ax1 = plt.subplots()

# create second y-axis object
ax2 = ax1.twinx()

# plot unemployment rate on first axis
ax1.plot(USA_data['year'], USA_data['Unemployment rate'], color='red')
ax1.set_xlabel('Year')
ax1.set_ylabel('Unemployment Rate', color='red')
ax1.tick_params(axis='y', labelcolor='red')

# plot GDP on second axis
ax2.plot(USA_data['year'], USA_data['GDP_value'], color='blue')
ax2.set_ylabel('GDP', color='green')
ax2.tick_params(axis='y', labelcolor='blue')

# set title
plt.title('USA: Unemployment Rate and GDP')

# show plot
plt.show()

USA_data

merged_df.head()

# filter data for low income countries
low_income = merged_df.loc[(merged_df['GDP_value'] < 1085)]

# filter data for high income countries
high_income = merged_df.loc[(merged_df['GDP_value'] > 13206) & (merged_df.Country != 'Greece') & (merged_df.Country != 'Spain')]

# calculate average unemployment rate for each year for low income countries
low_income_unemp = low_income.groupby('year')['Unemployment rate'].mean()

# calculate average unemployment rate for each year for high income countries
high_income_unemp = high_income.groupby('year')['Unemployment rate'].mean()

fig, ax = plt.subplots(figsize=(10, 5))

# plot low income countries
ax.bar(low_income_unemp.index, low_income_unemp.values, width=0.4, align='edge')

# plot high income countries
ax.bar(high_income_unemp.index+0.4, high_income_unemp.values, width=0.4, align='edge')

# set labels and title
ax.set_xlabel('Year')
ax.set_ylabel('Average Unemployment Rate')
ax.set_title('Unemployment Rate Comparison between Low and High Income Countries')

# set tick labels for x-axis
plt.xticks(low_income_unemp.index)

# create legend
ax.legend(['Low Income Countries', 'High Income Countries'])

# show plot
plt.show()

high_income_unemp

high_income.describe()

high_income[high_income['Unemployment rate']>15]

low_income[low_income['Unemployment rate']>15]

(low_income.Country.unique())

(high_income.Country.unique())

4.
# filter for African and American countries
africa_df = merged_df[merged_df["Continent"] == "Africa"]
america_df = merged_df[merged_df["Continent"] == "America"]

# calculate mean unemployment rate for each continent by year
africa_mean = africa_df.groupby("year")["Unemployment rate"].mean()
america_mean = america_df.groupby("year")["Unemployment rate"].mean()

# plot the line chart
plt.plot(africa_mean.index, africa_mean.values, label="Africa")
plt.plot(america_mean.index, america_mean.values, label="America")

# set the chart title and labels
plt.title("Mean Unemployment Rate in African and American Countries")
plt.xlabel("Year")
plt.ylabel("Unemployment Rate")

# add a legend
plt.legend()

# display the chart
plt.show()

4.
# filter the data to include only African and American countries
africa_df = merged_df[merged_df['Continent'] == 'Africa']
america_df = merged_df[merged_df['Continent'] == 'America']
europe_df = merged_df[merged_df['Continent'] == 'Europe']
ocenia_df = merged_df[merged_df['Continent'] == 'Oceania']
asia_df = merged_df[merged_df['Continent'] == 'Asia']

# create the box plots
sns.boxplot(data=[africa_df['Unemployment rate'], america_df['Unemployment rate'], europe_df['Unemployment rate'], ocenia_df['Unemployment rate'], asia_df['Unemployment rate']],
            palette=["#9b59b6", "#3498db", 'red', 'green', 'orange'])
plt.xticks([0,1,2,3, 4], ['Africa', 'America', 'Europe','Ocenia', 'Asia'])
plt.ylabel('Unemployment Rate')
plt.show()

merged_df[merged_df['Unemployment rate']>30]

merged_df[merged_df['GDP_value'] >133500]

merged_df[merged_df['GDP_value'] <0.5]

# Sort the dataset in ascending order based on GDP per capita
data_sorted = merged_df.sort_values('GDP_value', ascending=True)

# Get the name of the country with the lowest GDP per capita
lowest_gdp_country = data_sorted.iloc[0]['Country']
lowest_gdp = data_sorted.iloc[0]['GDP_value']

# Print the result
print(f"The country with the lowest GDP per capita is {lowest_gdp_country} with a GDP per capita of {lowest_gdp}.")

merged_df[merged_df['Unemployment rate'] <0.5]

